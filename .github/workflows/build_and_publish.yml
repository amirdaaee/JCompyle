name: Build and publish

on:
  push:
    tags:
      - 'v*.*.*'

env:
  RELEASE_VERSION: ${{ github.ref_name }}
  POETRY_VERSION: 1.1.10
  PYTHON_VERSION: 3.8


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: check pyproject version
        run: |
          export PYPROJECT="v$(cat pyproject.toml | grep version | cut -d \" -f 2)"
          echo "$PYPROJECT" and "$RELEASE_VERSION"
          if [ "$PYPROJECT" != "$RELEASE_VERSION" ]; then
              exit 1
          fi

  pypi:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      - name: setup env
        run: poetry install --no-interaction --no-dev
      - name: build and push
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          rm -rf dist
          poetry publish --build --no-interaction -v -u $PYPI_USERNAME -p $PYPI_PASSWORD

  docker:
    needs: pypi
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          pull: true
          build-args: |
            version=${{ env.RELEASE_VERSION }}
          tags: ${{ secrets.DOCKERHUB_TAG }}:${{ env.RELEASE_VERSION }},${{ secrets.DOCKERHUB_TAG }}:latest
